d2js.mixin('../uac/node.d2js')

d2js.fetch = function(params){
	this.checkPrivilege('department.query');
	
	Object.assign(params, 
			{types: $ARRAY('varchar', findAncientTypesAnd('DEPT')), 
			 parent_id: params.parent_id || this.session.user.node.id })

	sql{.
		select node.*, p.name parent_name from uac.node join uac.node p on p.id = node.parent_id 
		where (node.id = :parent_id OR node.path @> ARRAY[:parent_id]) and node.type = 'DEPT'
		sql{.?(params.name)
				and strpos(node.name, :name) > 0
		.}
		order by node.path, node.name
	.}
	
	return this.query(sql, params, params._page);
}

d2js.validate = function(rcd, action){
	this.checkPrivilege("department." + action);
	
	$V(this,rcd, {
		name : [V.notNull,V.longest(30), V.uniqueInNode('uac.node', 'name')],
		parent_id : [V.notNull],
		'def,address': [V.notNull,V.longest(40)], 
		'def,contactMan' : [V.notNull,V.longest(20)],
		'def,tel' : [V.notNull,V.longest(11)],
		'def,remark':[V.longest(2000)],
	});
}

d2js.create = function(row){
	this.createNode(row, 'DEPT', 'department');
}

d2js.modify = function(row){
	this.updateNode(row, 'department');
}

d2js.destroy = function(row){
	this.deleteNode(row, 'department');
}