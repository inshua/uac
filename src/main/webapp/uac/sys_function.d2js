d2js.fetch = function(params){
	this.checkPrivilege("uac.sys_function.query");
	params.parent_id = params.parent_id || 0;

	if(this.executor.isOracle()){
		var sql = 'select id, name, parent_id, menu_index, state, developer, code, uri, open_mode, icon_url, remarks from uac.sys_function ';
		
		sql += ' where 1=1 ';
	
		if(params.name != null) sql += ' and instr(name, :name) > 0';
		if(params.state != null) sql += ' and state = :state';
		if(params.developer != null) sql += ' and developer = :developer';
		
		if(params.parent_id == 0)
			sql += ' connect by parent_id = prior id start with id = 0' ;
		else
			sql += ' connect by parent_id = prior id start with parent_id = :parent_id' ;
		
		sql += ' order siblings by menu_index'; 
	} else if(this.executor.isPostgreSQL()){
		if(params.name || params.state){
			sql{.
				with recursive up as (select id, parent_id from uac.sys_function d 
					where 1=1 
						sql{.?(params.name)
							and strpos(d.name, :name) > 0
						.}
						sql{.?(params.state)
							and d.state = :state
						.}
					union
					select f.id, f.parent_id from uac.sys_function f, up 
					where f.id = up.parent_id),			
				 all_ as (
					select *, array[menu_index] path 
					from sys_function 
					where id = :parent_id
					union 
					select d.*, path || d.menu_index from uac.sys_function d, all_ 
					where d.parent_id = all_.id  
				)
				select id, name, parent_id, menu_index, state, developer, code, uri, open_mode, icon_url, remarks 
				from all_ 
				where id in (select id from up)
				order by path		
			.}
		} else {
			sql{.
				with recursive all_ as (
						select *, array[menu_index] path 
						from uac.sys_function 
						where id = :parent_id
						union 
						select d.*, path || d.menu_index from uac.sys_function d, all_ 
						where d.parent_id = all_.id  
					)
					select id, name, parent_id, menu_index, state, developer, code, uri, open_mode, icon_url, remarks 
					from all_ 				
					order by path
			.}	
		}
	}
	
	// sql = this.appendSort(sql, params._sorts);
	
	return this.query(sql, params);
};
d2js.exports.listAll=
d2js.listAll = function(params, body, pageDef){

	if(this.executor.isOracle()){
		var sql = 'select id, name, parent_id, state, developer, code from uac.sys_function ';
	
		sql += ' connect by parent_id = prior id ' ;
		
		if(params.id != null){
			sql += ' and id <> :id' ;		
		}
	
		sql += ' start with id = 0 order siblings by menu_index'; 
	} else if(this.executor.isPostgreSQL()){
		var sql = 'with recursive p as (select *, array[menu_index] path from uac.sys_function where id = 0 ' 
			+'union select d.*, path || d.menu_index from uac.sys_function d, p where d.parent_id = p.id ' 
			+ (params.id != null && ' and d.id <> :id' || '')
			+') select id, name, parent_id, state, developer, code from p order by path';
	}
	
	return this.query(sql, params);
};
d2js.exports.listAction=
d2js.listAction = function(params, body, pageDef){
	sql{.
		select id, name, state, code, dependence from uac.sub_function
			where sys_function=:id
			order by menu_index
	.} 
	
	return this.query(sql, params);
};
d2js.exports.resetActions =true;
d2js.resetActions = function(params, body, pageDef){
	// 从 URI 读入功能列表，更新到 sub_function
	var uri = params.uri;
	var sysFunction = params.id;
	
	this.resetActionsInner(uri, sysFunction);
        
	return this.listAction.apply(this, arguments);
};

d2js.resetActionsInner = function(uri, sysFunction){
    var actions = [];
	if(uri){
		if(uri.indexOf('?') == -1) uri += '?_la=true'; else uri += '&_la=true';
		var url = this.request.getRequestURL();
		url = url.substring(0, url.indexOf('/', 'http://'.length));
		uri = url + website + uri;
		
		try{
			var responseBody = org.apache.http.client.fluent.Request.Get(uri).execute().returnContent();
			logger.debug('GOT ' + responseBody);
			actions = JSON.parse((responseBody + '').trim());
		} finally{}
	}
    
	if(actions.length){
		if(this.executor.isOracle()){
			sql{.(sqlMerge)
				MERGE INTO uac.sub_function USING dual ON ( sys_function=:sys_function and code = :code)
				WHEN MATCHED THEN UPDATE SET menu_index = :menu_index, name = :name , state = :state, dependence = :dependence 
				WHEN NOT MATCHED THEN INSERT (id, name,sys_function, menu_index, state, code, dependence)
				    VALUES (uac.seq_nonentity.nextval, :name, :sys_function, :menu_index, :state, :code, :dependence)
    		.}
		} else if(this.executor.isPostgreSQL()){
			sql{.(sqlMerge)
				with nv(name,sys_function, menu_index, state, code, dependence) as (values(:name, :sys_function, :menu_index, :state, :code, :dependence)),
				  upsert as (UPDATE uac.sub_function f SET menu_index = :menu_index, name = :name , state = :state, dependence = :dependence WHERE sys_function=:sys_function and code = :code RETURNING f.*)
				    insert into uac.sub_function(id, name,sys_function, menu_index, state, code, dependence)
				       select nextval('uac.seq_nonentity'), name,sys_function, menu_index, state, code, dependence from nv
				     where not exists(select 1 from upsert where upsert.code = nv.code and upsert.sys_function = nv.sys_function)
			.}
		}
	    var arr = [];
	    for(var i=0; i<actions.length; i++) arr.push('?');
	    var sqlClean = 'delete from uac.sub_function where sys_function = ? and code not in ('+ arr.join(',') +')'; 
	    
	    this.doTransaction(function(){
	    	var me = this;
	    	actions.forEach(function(action, menuIndex){
	    		action.menu_index = menuIndex;
	    		action.sys_function = sysFunction;
	    		me.execute(sqlMerge, action);        		
	    	});
	    	this.execute(sqlClean, [sysFunction].concat(actions.map(function(a){return a.code;})));
	    });
	} else {
		var sqlClean = 'delete from uac.sub_function where sys_function = ?';
		this.execute(sqlClean, [sysFunction]);
	}
};

d2js.create = function(rcd){
	this.checkPrivilege("uac.sys_function.add");
	if(rcd.parent_id == null) rcd.parent_id = 0;
	
	$V(this,rcd, {
		name : [V.notNull,V.longest(100),V.unique('uac.sys_function')],  
		parent_id : [],
		menu_index : [],  
		state : [V.notNull,V.longest(1)],  
		developer : [],  
		code : [V.notNull,V.longest(200),V.unique('uac.sys_function')],  
		uri : [V.longest(200)], 
		icon_url : [], 
		open_mode : [V.longest(1)],
		remarks : [V.longest(500)]
	});

	
	rcd.id = this.nextId("uac.SEQ_NONENTITY");
	this.actas('uac.sys_function.add', 'uac.sys_function', rcd.id, rcd);
	
	// logger.info('is postgres ' + this.executor.isPostgreSQL());
	if(this.executor.isOracle()){
		rcd.menu_index = this.query('select nvl(max(menu_index), -1) + 1 mn from uac.sys_function where parent_id=?', [rcd.parent_id]).rows[0].mn;
	} else if(this.executor.isPostgreSQL()){
		rcd.menu_index = this.query('select coalesce(max(menu_index), -1) + 1 mn from uac.sys_function where parent_id=?', [rcd.parent_id]).rows[0].mn;
		logger.info('got menu_index ' + rcd.menu_index);
	}
	// logger.info('new sys_function ' + JSON.stringify(rcd));
	this.insertRow('uac.sys_function', rcd, ["id","name","parent_id","menu_index","state","developer","code","uri","open_mode", "icon_url", "remarks"]);
	
	if(rcd.open_mode != 'P'){
		this.resetActionsInner(rcd.uri, rcd.id);
	}
		
};

d2js.modify = function(rcd){	// 菜单可能会出现同样的 menu_index：调动次序后没有更新其它兄弟菜单的 menu_index
	this.checkPrivilege("uac.sys_function.edit");
	if(rcd.id == null) return this.create(params, rcd);
	
	if(rcd.parent_id == null) rcd.parent_id = 0;
	
	$V(this,rcd, {id : [V.notNull],  
		name : [V.notNull,V.longest(100), V.unique('uac.sys_function')],  
		parent_id : [],  
		menu_index : [],  
		state : [V.notNull,V.longest(1)],  
		developer : [],  
		code : [V.notNull,V.longest(200),V.unique('uac.sys_function')],  
		uri : [V.longest(200)],
		icon_url : [],
		open_mode : [V.longest(1)],
		remarks : [V.longest(500)]
	});

//	this.actas('sys_function.edit', 'sys_function', rcd.id, rcd);
	
	this.doTransaction(function(){
		var siblings = this.query("select id, menu_index, name from sys_function where parent_id=:parent_id and id <> :id order by menu_index", rcd).rows;
		siblings.splice(rcd.menu_index, 0, rcd);
		
//		var arr = [];
//		siblings.forEach(function(rcd, index){
//			var r = {id : rcd.id, menu_index : index, name : rcd.name};
//			arr.push(r);
//		}, this);
//		logger.info('siblings become ' + JSON.stringify(arr));
		
		siblings.forEach(function(rcd, index){
			var r = {id : rcd.id, menu_index : index};
			this.execute("update uac.sys_function set menu_index = :menu_index where id = :id", r);
		}, this);	

		logger.info('update sys_function ' + JSON.stringify(rcd)); 
		this.updateRow('sys_function', rcd, ["id","name","parent_id","state","developer","code","uri","open_mode", "icon_url", "remarks"]);
	});
	if(rcd.open_mode != 'P'){
		this.resetActionsInner(rcd.uri, rcd.id);
	}

};

d2js.destroy = function(rcd){
	this.checkPrivilege("uac.sys_function.delete");
	this.actas('uac.sys_function.delete', 'uac.sys_function', rcd.id, rcd);
	
	this.deleteRow('uac.sys_function', rcd);

};


