[% response.contentType="plain/text"; %][%
    imports('./jssp-lib/codegen.js');
	
 	Object.prototype.keys = function(){
		var arr = [];
		for(var k in this){
			if(this.hasOwnProperty(k)){
				arr.push(k);
			}
		}
		return arr;
	};
                                
 	var tb = JSON.parse(request.tableDef);
	tb.allColumnCodes = (function(){
		var arr = [];
		for(var i=0; i< tb.columns.length; i++){
			arr.push(tb.columns[i].code);
		}
		return arr;
	})();
	tb.allColumns = (function(){
		var d = {};
		for(var i=0; i< tb.columns.length; i++){
			d[tb.columns[i].code] = tb.columns[i];
		}
		return d;
	})();
	tb.nodeColumn = tb.columns.find(function(col){return col.parentTable == 'node';});
	tb.pkColumn = tb.columns.find(function(col){return col.primary;});
	
%]
d2js.fetch = function(params){
	this.checkPrivilege("[%= tb.code %].query");
[%	cond(tb.nodeColumn, function(){ %]
	params.node = params.node || this.session.user.node.id;
	params.types = findAncientTypes([%~ tb.code.toUpperCase() %])
	sql{.
		with nd as (
			select node.* from uac.node
			where node.id = :node OR node.path @> ARRAY[:node]
		)
		select [%= tb.columns.map(function(col){return 't.' + col.code}).join(",") %], nd.name node_name 
		  from [%= tb.code %] t, nd 
		 where t.[%= tb.nodeColumn.code %] = nd.id
	.}	
[%  }, true, function(){ %]
	sql{.
	   select [%= tb.columns.map(function(col){return 't.' + col.code}).join(",") %] 
	     from [%= tb.code %] t
	    where 1 = 1
	.}
[%  }); %]
[% tb.columns.filter(function(itm){return itm.searchUiIndex && itm != tb.nodeColumn;})
 				.sort(function(itm){return itm.searchUiIndex;}).forEach(function(col){
	cond(dbTypeToExtFiledType(col.type) == 'string', function(){%]
	sql{.?(params.[%= col.code %] != null) 
		and instr([%= col.code %], :[%= col.code %]) > 0
	.}
	[%}, function(){%]
	sql{.?(params.[%= col.code %] != null) 
		and [%= col.code %] = :[%= col.code %]
	.}
[%	});		
 });%]

	sql = this.orderBy(sql, params._sorts);
	
	return this.query(sql, params, params._page);
};
[%	function validations(){ %] 	 	
	$V(this, rcd, {[% tb.columns.forEach(function(col){ 
		%][%= col.code %] : [[%= col.notNull ? 'V.notNull,' : '' %][%= col.length ? 'V.longest(' + col.length + '),' : '' %][%= col.listOfValues ? 'V.inside([' + col.listOfValues.keys().map(function(k){return '"' + k + '"';}).join(',') + ']),' : '' %][%= col.unique ? 'V.unique(\'' + tb.code + '\'),' : '' %][%= col.uniqueInNode ? 'V.uniqueInNode(\'' + tb.code + '\'),' : '' %]],  
		[% }); %]
	});
[%	} %]

d2js.validate = function(rcd, action){
	this.checkPrivilege("[%= tb.code %]." + action);
	[% validations(); %]
}

d2js.create = function(rcd){
	this.validate(rcd, 'add');
	
	rcd.[%=tb.pkColumn.code%] = this.nextId([%~ tb.pkColumn.sequence || 'SEQ_ENTITY' %]);
	this.actas('[%= tb.code %].add', '[%= tb.code %]', rcd.[%=tb.pkColumn.code%], rcd);
	this.insertRow('[%= tb.code %]', rcd, [%~ tb.columns.map(function(col){return col.code;}) %]);};

d2js.modify = function(rcd){
	this.validate(rcd, 'edit');
	
	this.actas('[%= tb.code %].edit', '[%= tb.code %]', rcd.[%=tb.pkColumn.code%], rcd);
	this.updateRow('[%= tb.code %]', rcd, [%~ tb.columns.map(function(col){return col.code;}) %]);};

d2js.destroy = function(rcd){
	this.validate(rcd, 'delete');
	
	this.actas('[%= tb.code %].delete', '[%= tb.code %]', rcd.[%=tb.pkColumn.code%], rcd);
	this.deleteRow('[%= tb.code %]', rcd);};
